(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{111:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return d})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return u}));var r=n(2),a=n(6),o=(n(0),n(124)),c={id:"graphs",title:"Graphs",sidebar_label:"Graphs"},d={id:"data-structures/graphs",title:"Graphs",description:"A graph is a data structure composed of a collection of nodes and",source:"@site/docs/data-structures/graphs.md",permalink:"/studyguide/docs/data-structures/graphs",editUrl:"https://github.com/ajmhyd/studyguide/edit/master/website/docs/data-structures/graphs.md",sidebar_label:"Graphs",sidebar:"someSidebar",previous:{title:"Introduction",permalink:"/studyguide/docs/intro"},next:{title:"Linked Lists",permalink:"/studyguide/docs/data-structures/linkedLists"}},s=[{value:"Code",id:"code",children:[]}],i={rightToc:s};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},i,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"A graph is a data structure composed of a collection of nodes and\nedges."),Object(o.b)("p",null,"Graphs are a non-linear data structure ",Object(o.b)("em",{parentName:"p"},"as opposed to a linked list, stack, or queue")),Object(o.b)("p",null,"Nodes may also be referred to as vertices"),Object(o.b)("p",null,"Graphs are used to solve many real-world problems and can be used\nto represent networks"),Object(o.b)("p",null,"Two types of graphs:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Directed graphs")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Undirected graphs"))),Object(o.b)("h4",{id:"directed-graphs"},"Directed Graphs"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"A directed graph contains edges which function similarly to a one-way\nstreet; ",Object(o.b)("em",{parentName:"li"},"they have a direction"))),Object(o.b)("h4",{id:"undirected-graphs"},"Undirected Graphs"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"An undirected graph, in contrast, contains edges which flow bidirectionally, ",Object(o.b)("em",{parentName:"li"},"like a two-way street"))),Object(o.b)("h2",{id:"code"},"Code"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"class Node {\n  constructor(value) {\n    this.value = value;\n    this.edges = [];\n  }\n}\n\nclass Graph {\n  constructor(undirected = false) {\n    this.undirected = undirected;\n    this.nodes = [];\n  }\n\n  addNode(value) {\n    this.nodes.push(new Node(value));\n  }\n\n  removeNode(value) {\n    this.nodes = this.nodes.filter(node => node.value !== value);\n    this.nodes.forEach(node => {\n      node.edges = node.edges.filter(edge => edge.value !== value);\n    });\n  }\n\n  getNode(value) {\n    return this.nodes.find(node => node.value === value);\n  }\n\n  addEdge(value1, value2) {\n    const node1 = this.getNode(value1);\n    const node2 = this.getNode(value2);\n\n    node1.edges.push(node2);\n\n    if (this.undirected) {\n      node2.edges.push(node1);\n    }\n    return `An edge between ${node1.value} and ${node2.value} was added`;\n}\n\n")))}u.isMDXComponent=!0},124:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return f}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=a.a.createContext({}),u=function(e){var t=a.a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):d(d({},t),e)),n},l=function(e){var t=u(e.components);return a.a.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),l=u(n),b=r,f=l["".concat(c,".").concat(b)]||l[b]||p[b]||o;return n?a.a.createElement(f,d(d({ref:t},i),{},{components:n})):a.a.createElement(f,d({ref:t},i))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=b;var d={};for(var s in t)hasOwnProperty.call(t,s)&&(d[s]=t[s]);d.originalType=e,d.mdxType="string"==typeof e?e:r,c[1]=d;for(var i=2;i<o;i++)c[i]=n[i];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);