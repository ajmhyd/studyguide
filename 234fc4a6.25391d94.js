(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{108:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return c}));var i=n(2),r=n(6),a=(n(0),n(124)),o={id:"linkedLists",title:"Linked Lists",sidebar_label:"Linked Lists"},l={id:"data-structures/linkedLists",title:"Linked Lists",description:"Like arrays, linked lists are used to represent sequential data",source:"@site/docs/data-structures/linkedLists.md",permalink:"/docs/data-structures/linkedLists",editUrl:"https://github.com/ajmhyd/studyguide/edit/master/website/docs/data-structures/linkedLists.md",sidebar_label:"Linked Lists",sidebar:"someSidebar",previous:{title:"Graphs",permalink:"/docs/data-structures/graphs"},next:{title:"Stacks",permalink:"/docs/data-structures/stacks"}},s=[{value:"Singly vs. Doubly-Linked Lists",id:"singly-vs-doubly-linked-lists",children:[]},{value:"Methods",id:"methods",children:[]},{value:"Code",id:"code",children:[{value:"Singly Linked List",id:"singly-linked-list",children:[]}]},{value:"Recommended LeetCode questions",id:"recommended-leetcode-questions",children:[]}],d={rightToc:s};function c(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(i.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Like arrays, linked lists are used to represent sequential data"),Object(a.b)("p",null,"The benefit of linked lists is that insertion and deletion from anywhere in the list is ",Object(a.b)("inlineCode",{parentName:"p"},"O(1)")," whereas in arrays the following elements will have to be shifted"),Object(a.b)("p",null,"Linked lists are a series of linked nodes where each node points to the\nnext node in the list."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Each node has a value and a pointer to the next node")),Object(a.b)("p",null,"Two pointer approaches are also common for linked lists. For example:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("strong",{parentName:"p"},"Getting the ",Object(a.b)("inlineCode",{parentName:"strong"},"kth")," from last node")," - Have two pointers, where one is ",Object(a.b)("inlineCode",{parentName:"p"},"k")," nodes ahead of the other. When the node ahead reaches the end, the other node is ",Object(a.b)("inlineCode",{parentName:"p"},"k")," nodes behind")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("strong",{parentName:"p"},"Detecting cycles")," - Have two pointers, where one pointer increments twice as much as the other, if the two pointers meet, means that there is a cycle")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("strong",{parentName:"p"},"Getting the middle node")," - Have two pointers, where one pointer increments twice as much as the other. When the faster node reaches the end of the list, the slower node will be at the middle"))),Object(a.b)("h2",{id:"singly-vs-doubly-linked-lists"},"Singly vs. Doubly-Linked Lists"),Object(a.b)("p",null,"Linked lists can be singly, or doubly-linked. In a singly-linked list, each\nnode has one pointer which points to the next element in the list. In a\ndoubly-linked list, each node has two pointers: one which points to the\nnext element in the list and one which points to the previous element in\nthe list."),Object(a.b)("p",null,"Doubly-linked lists are great for removing nodes because they provide\naccess to the previous and the next nodes. To remove a node from a\nsingly-linked list, we have to iterate through the list, keeping track of\nthe previous node."),Object(a.b)("h2",{id:"methods"},"Methods"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("inlineCode",{parentName:"p"},"push(item)")," Adds an element to the linked list")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("inlineCode",{parentName:"p"},"pop()")," Removes an element from the linked list")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("inlineCode",{parentName:"p"},"get(index)")," Returns an element from a given index")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("inlineCode",{parentName:"p"},"delete(index)")," Deletes an item from a given index")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("inlineCode",{parentName:"p"},"isEmpty()")," Returns a boolean indicating whether the list is empty"))),Object(a.b)("hr",null),Object(a.b)("h2",{id:"code"},"Code"),Object(a.b)("h3",{id:"singly-linked-list"},"Singly Linked List"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-js"}),"class Node {\n  constructor(value) {\n    this.value = value;\n    this.next = null;\n  }\n}\n\nclass SinglyLinkedList {\n  constructor() {\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  isEmpty() {\n    return this.length === 0;\n  }\n\n  push(value) {\n    let newNode = new Node(value);\n    if (this.isEmpty()) {\n      this.head = newNode;\n      this.tail = newNode;\n    } else {\n      this.tail.next = newNode;\n      this.tail = newNode;\n    }\n    return this.length++;\n  }\n\n  pop() {\n    // empty list\n    if (this.isEmpty()) {\n      return null;\n    } else if (this.length === 1) {\n      // one node in list\n      const nodeToRemove = this.head;\n      this.head = null;\n      this.tail = null;\n      this.length--;\n      return nodeToRemove;\n    } else {\n      // multiple nodes in list\n      let currentNode = this.head;\n      const nodeToRemove = this.tail;\n      let secondToLastNode;\n\n      while(currentNode) {\n        if (currentNode.next === this.tail) {\n          secondToLastNode = currentNode;\n          break;\n        }\n        currentNode = currentNode.next;\n      }\n      secondToLastNode.next = null;\n      this.tail = secondToLastNode;\n      this.length--;\n      return nodeToRemove;\n    }\n  }\n\n  get(index) {\n    // index is invalid\n    if (index < 0 || index > this.length || this.isEmpty()) {\n      return null;\n    }\n    if (index === 0) {\n      return this.head;\n    }\n    if (index === this.length - 1) {\n      return this.tail;\n    }\n    let currentNode = this.head;\n    let counter = 0;\n\n    while(counter < index) {\n      counter++;\n      currentNode = currentNode.next;\n    }\n    return currentNode;\n  }\n\n  delete(index) {\n    if (index < 0 || index > this.length || this.isEmpty()) {\n      return null;\n    }\n    if (index === 0) {\n      this.head = this.head.next;\n      return;\n    }\n    const previous = this.get(index -1);\n    if(!previous || !previous.next) {\n      return;\n    }\n    previous.next = previous.next.next;\n  }\n}\n")),Object(a.b)("hr",null),Object(a.b)("h2",{id:"recommended-leetcode-questions"},"Recommended LeetCode questions"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("a",Object(i.a)({parentName:"p"},{href:"https://leetcode.com/problems/reverse-linked-list/"}),"Reverse a Linked List"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("a",Object(i.a)({parentName:"p"},{href:"https://leetcode.com/problems/linked-list-cycle/"}),"Detect Cycle in a Linked List"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("a",Object(i.a)({parentName:"p"},{href:"https://leetcode.com/problems/merge-two-sorted-lists/"}),"Merge Two Sorted List"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("a",Object(i.a)({parentName:"p"},{href:"https://leetcode.com/problems/merge-k-sorted-lists/"}),"Merge K Sorted List"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("a",Object(i.a)({parentName:"p"},{href:"https://leetcode.com/problems/remove-nth-node-from-end-of-list/"}),"Remove Nth Node From End Of List"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("a",Object(i.a)({parentName:"p"},{href:"https://leetcode.com/problems/reorder-list/"}),"Reorder List")))))}c.isMDXComponent=!0},124:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var i=n(0),r=n.n(i);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=r.a.createContext({}),c=function(e){var t=r.a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return r.a.createElement(d.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(n),u=i,h=p["".concat(o,".").concat(u)]||p[u]||b[u]||a;return n?r.a.createElement(h,l(l({ref:t},d),{},{components:n})):r.a.createElement(h,l({ref:t},d))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var d=2;d<a;d++)o[d]=n[d];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);