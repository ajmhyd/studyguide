(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{118:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return a})),r.d(t,"metadata",(function(){return c})),r.d(t,"rightToc",(function(){return l})),r.d(t,"default",(function(){return u}));var n=r(2),o=r(6),i=(r(0),r(124)),a={id:"merge-sort",title:"Merge Sort",sidebar_label:"Merge Sort"},c={id:"algorithms/merge-sort",title:"Merge Sort",description:"Merge sort is a divide and conquer algorithm which means it divides its input array into two halves and recursively calls itself on each half, then merges the two sorted halves back together",source:"@site/docs/algorithms/merge-sort.md",permalink:"/docs/algorithms/merge-sort",editUrl:"https://github.com/ajmhyd/studyguide/edit/master/website/docs/algorithms/merge-sort.md",sidebar_label:"Merge Sort",sidebar:"someSidebar",previous:{title:"Insertion Sort",permalink:"/docs/algorithms/insertion-sort"},next:{title:"Quick Sort",permalink:"/docs/algorithms/quick-sort"}},l=[{value:"Code",id:"code",children:[]}],s={rightToc:l};function u(e){var t=e.components,r=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},s,r,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Merge sort is a ",Object(i.b)("em",{parentName:"p"},"divide and conquer")," algorithm which means it divides its input array into two halves and recursively calls itself on each half, then merges the two sorted halves back together"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"O(n log n)")," time complexity"),Object(i.b)("p",null,"The mergeSort function is responsible for splitting the array into smaller sub-arrays while the merge function is the function which sorts the arrays."),Object(i.b)("h2",{id:"code"},"Code"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"function mergeSort(arr) {\n  if (arr.length < 2) {\n    return arr;\n  }\n  const middle = Math.floor(arr.length / 2);\n  const left = arr.slice(0, middle);\n  const right = arr.slice(middle);\n\n  return merge(mergeSort(left), mergeSort(right));\n}\n\nfunction merge(left, right) {\n  const sorted = [];\n  while (left.length && right.length) {\n    if (left[0] <= right[0]) {\n      sorted.push(left.shift());\n    } else {\n      sorted.push(right.shift());\n    }\n  }\n  let results = [...sorted, ...left, ...right];\n  return results;\n}\n")))}u.isMDXComponent=!0},124:function(e,t,r){"use strict";r.d(t,"a",(function(){return p})),r.d(t,"b",(function(){return f}));var n=r(0),o=r.n(n);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=o.a.createContext({}),u=function(e){var t=o.a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},p=function(e){var t=u(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=o.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,a=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=u(r),m=n,f=p["".concat(a,".").concat(m)]||p[m]||d[m]||i;return r?o.a.createElement(f,c(c({ref:t},s),{},{components:r})):o.a.createElement(f,c({ref:t},s))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,a=new Array(i);a[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:n,a[1]=c;for(var s=2;s<i;s++)a[s]=r[s];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,r)}m.displayName="MDXCreateElement"}}]);